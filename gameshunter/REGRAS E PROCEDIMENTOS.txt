Definição de pronto
	Isso é algo que tem que caber pra nós dois. O que eu acho necessário para que
	algo esteja pronto é: Anotado, testado e refatorado, tudo pela pessoa que fez
	a classe. Quando acharmos que algo já está bom para uma release, os dois devem
	revisar todas as classes, refatorar o que achar necessário, verificando sempre
	um com o outro o motivo para refatorações e coisas do gênero. Esse é o ponto
	mais importante que precisamos ter, definir bem o que é pronto ou não.
	
Número de 'tarefas' em andamento
	O ideal é ter no máximo 2 tarefas sendo feitas ao mesmo tempo,
	independente do número de classes que existem dentro delas.
	
Duração do sprint
 	Acho que devemos fazer inicialmente de 2 semanas ou 3 semanas, isso fica a seu
 	critério.
 	
 							
 							
 							
 							
 							
 								Explicação das API usadas
 								
 								
JUnit
	Responsável pelos testes unitários
	
Mockito
	Auxilia o JUnit a fazer testes em classes mais complexas, como DAO's, onde não
	queremos que o comportamento do DAO influencie no resultado. Permite que seja
	feito um teste que só leva em conta a classe realmente testada.
	
Selenium
	Responsável pelos testes funcionais web. É capaz de fazer qualquer ação com
	vários navegadores diferentes. Ainda é necessário usar o JUnit para validar os
	testes.
	
Jacoco
	Responsável por mostrar o test-coverage. Quanto do teste já cobrimos. Está 
	configurado para rodar sempre que fizermos uso do mvn test. Possui diversas
	configurações para verificar a % de classes, linhas, métodos, ramificações e 
	complexidade do código forão testadas, cabendo à essa aplicação permitir que
	os testes sejam bem sucedidos ou não. Se ela não achar o coverage suficiente,
	não terminamos os testes ainda. Os números são coisas que temos que discutir,
	existem linhas de código que não vamos querer que sejam verificadas, métodos
	e afins. Exemplos disso são: Getters e setters.
	O resultado do test coverage pode ser encontrado em: target>site>jacoco
	É um arquivo .html.
	
Maven Compiler
	Garante que as configurações mais gerais sejam seguidas, já que o Maven 
	ignora essas configurações do Eclipse. Está settada para usar JDK 1.8
	e o encoding UTF-8