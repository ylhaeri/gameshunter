<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
						http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<context:component-scan base-package="br.com.gameshunter." />
	<task:annotation-driven />
	<tx:annotation-driven transaction-manager="GamesHunterManager" />

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above 
		and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!-- <bean id="someFilter" class="..."/> -->
	<!-- <bean id="anotherFilter" class="..."> ... </bean> -->

	<bean id="simpleByteSource" class="org.apache.shiro.util.SimpleByteSource">
		<constructor-arg name="" value=':3M9@%U)#=Sz3~)PCBlYgnOt' />
	</bean>

	<bean id="hashService" class="org.apache.shiro.crypto.hash.DefaultHashService">
		<property name="hashIterations" value="500000" />
		<property name="hashAlgorithmName" value="SHA-512" />
		<property name="generatePublicSalt" value="true" />
		<property name="privateSalt" ref="simpleByteSource" />
	</bean>

	<bean id="passwordService"
		class="org.apache.shiro.authc.credential.DefaultPasswordService">
		<property name="hashService" ref="hashService" />
	</bean>

	<bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
		<property name="passwordService" ref="passwordService" />
	</bean>

	<bean id="authenticationRealm" class="br.com.gameshunter.realm.AuthenticationRealm">
		<property name="credentialsMatcher" ref="passwordMatcher" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Change to realms if need to add another realm -->
		<property name="realm" ref="authenticationRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- override these for application-specific URLs if you like: <property 
			name="loginUrl" value="/login.jsp"/> <property name="successUrl" value="/home.jsp"/> 
			<property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/> 
			</util:map> </property> -->
		<property name="filterChainDefinitions">
			<value>
			</value>
		</property>
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- Secure Spring remoting: Ensure any Spring Remoting method invocations -->
	<!-- can be associated with a Subject for security checks. -->
	<bean id="secureRemoteInvocationExecutor"
		class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<bean id="secureRemoteInvocationFactory"
		class="org.apache.shiro.spring.remoting.SecureRemoteInvocationFactory" />

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames"
			value="/WEB-INF/i18n/ValidationMessages,/WEB-INF/i18n/site/header, /WEB-INF/i18n/general" />
	</bean>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	</bean>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<mvc:interceptors>
		<bean class="br.com.gameshunter.interceptor.LoginInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>
</beans>